allMarkers = new Array
namedMarkers = {}
nearbyMarkers = new Array
crimeMarkers = new Array

detectBrowser = () ->
	mapdiv = $("#map_canvas")
	mapdiv.css 'width', '100%'
	if 'iPhone' in navigator.userAgent or 'Android' in navigator.userAgent
		mapdiv.css 'height', '200px'
	else
		mapdiv.css 'height', '600px'

# rock some geolocation
yesLocation = (position) ->
	pos = latlng position.coords.latitude, position.coords.longitude
	@userPosition = markerOptions({title: "Your Location", position: pos})
	clickMap(pos)
noLocation = (error, callback=null) ->
	msg = "Geolocation Error: "
	switch error.code
		when error.TIMEOUT
			msg += "Timeout"
		when error.POSITION_UNAVAILABLE
			msg += "Position unavailable"
		when error.PERMISSION_DENIED
			msg += "Permission denied"
		when error.UNKNOWN_ERROR
			msg += "Unknown error"
	alertBox "error", msg
	callback(error) if callback?
geolocate = (success = yesLocation, fail = null) ->
	navigator.geolocation.getCurrentPosition success, (error) -> noLocation(error, fail)
window.geolocate = geolocate

# simplify Google Maps API
# creates a maps.LatLng with the given coordinates. easy!
latlng = (lat, lng) ->
	new google.maps.LatLng(lat, lng)
window.latlng = latlng

# creates a maps.Marker with the given title and position
# and adds it to the given marker group (an array of markers
marker = (title, position, group = null, handler = null) ->
	mrkr = new google.maps.Marker({map: @googleMap, position: position, title: title})
	google.maps.event.addListener(mrkr, 'click', handler) if handler?
	group.push(mrkr) if group?
	allMarkers.push(mrkr)
	mrkr
window.marker = marker

# a more versatile marker creator that takes a hash of options
# takes standard marker options + handler (click event handler), group (array of related markers)
markerOptions = (options) ->
	options.map = @googleMap
	# add marker to the map object
	mrkr = new google.maps.Marker(options)
	# create marker from options hash (extra options will be ignored)
	console.log "new marker #{options.title} at #{mrkr.position.lat()}, #{mrkr.position.lng()}"
	# register click listener to call the given event handler
	google.maps.event.addListener(mrkr, 'click', options.handler) if options.handler?
	options.group.push(mrkr) if options.group?
	allMarkers.push(mrkr)
	mrkr
window.markerOptions = markerOptions

window.stopMarker = (stop, group = null, handler = null) ->
	markerOptions
			title: stop.name
			position: latlng(stop.lat, stop.lon)
			# icon: "<%= asset_path 'busstop.png' %>"
			group: group
			handler: handler

window.crimeMarker = (crime, group = null, handler = null) ->
	markerOptions
		title: crime.summarized_offense_description
		position: latlng(crime.latitude, crime.longitude)
		# icon: "<%= asset_path 'busstop.png' %>"
		group: group
		handler: handler

# creates a polyline! takes standard polyline options
polyline = (options) ->
	options.map = @googleMap
	line = new google.maps.Polyline(options)
window.polylineOptions = polyline

# given an array of markers, removes all of them from the map and empties the array.
clearMarkerGroup = (group) ->
	if group?
		marker.setMap(null) for marker in group
		group.splice 0, group.length

clickMap = (position) ->
	google.maps.event.trigger(@googleMap, 'click', {latLng: position})
	@googleMap.setZoom(14) if @googleMap.zoom < 13

window.showStopMarker = (position) ->
	@clickMarker.setPosition(position)

# map click handlers
window.nothing = nothing = (event) ->

window.showNearestStops = ->
	# initialize the map using loadJourney and no click functionality
	# @dataFunction = -> geolocate(loadNearbyStops, noLocation)
	# initializeMap(dataFunction, nothing)
	initializeMapOptions
			clickHandler: nothing
			geolocate:
				enable: true
				onSuccess: loadNearbyStops
				onFail: noLocation

# load stops near the given position and display markers and list
window.loadNearbyStops = (position) =>
	clearMarkerGroup nearbyMarkers
	@clickMarker.setPosition(position)
	url = "/stop.json"
	# perform an AJAX request to stop#index with the user's location
	get url, {lat: position.lat(), lon: position.lng(), api: yes}, (result, list) ->
		# the API returns a JSON array of stops
		# iterate through the array and display each one in the list column and create a marker for it
		for stop in result
			list.append(stopDisplay(stop)).fadeIn()
			stopMarker stop, nearbyMarkers, clickStopMarker(stop)

# load nearby stops with predictions and display the first one (closest to the user)
window.loadNearestStop = (position) ->
	url = "/stop.json"
	list = $("#model-list")
	$("#page-title").text("Right Here, Right Now")
	title = $("#page-header")
	title.html("Finding Nearest Stop...")
	list.fadeOut 'fast'
	# create a marker at the query location
	markerOptions
			title: "Your Location"
			position: position
	get url, {lat: position.lat(), lon: position.lng(), predictions: true}, (result, list) ->
		list.html("").show()
		stop = result[0]
		# the nearest stop (results sorted by distance)
		# set the page title
		title.fadeOut 'fast', -> title.html(stop.name).fadeIn()
		# create a marker for the nearest stop
		stopMarker stop
		# display all the upcoming arrivals
		for route in stop.routes when route.arrivals.length > 0
			for trip in route.arrivals
				list.append arrivalDisplay(trip).fadeIn()

# event handler for clicking on a stop marker
# returns an anonymous function to call when the stop is clicked on
clickStopMarker = (stop) -> () ->
	$("#page-header").text(stop.title)
	loadStopSchedule stop.id

clickCrimeMarker = (crime) -> () ->
	console.log "Crime marker clicked #{crime}"

# TODO: implement this filter parameter! it needs to come from somewhere, only Ruby knows about it
# load arrivals for the given stop and display in list
loadStopSchedule = (stopId, filter = "") ->
	url = "/stop/#{stopId}/schedule.json"
	get url, {api: yes, r: filter}, (result, list) =>
		stop = result["stop"]
		# center the map and add a marker for the stop
		mrkr = stopMarker(stop, null, clickStopMarker)
		@googleMap.setCenter(mrkr.position)
		# display each of the arrivals
		if result["arrivals"].length == 0
			list.append journeyDisplayError "No upcoming arrivals."
		else
			for trip in result["arrivals"]
				list.append arrivalDisplay(trip).fadeIn()

# loadNearbyStops(pos)
window.loadStopSchedule = loadStopSchedule

###
# ROUTE METHODS
###
window.showNearbyRoutes = (query) ->
	initializeMapOptions
			clickHandler: nothing
			geolocate:
				enable: true
				onSuccess: loadNearbyRoutes(query)
				onFail: noLocation
loadNearbyRoutes = window.loadNearbyRoutes = (query) -> (position) ->
	url = "/route.json"
	params =
		lat: position.coords.latitude
		lon: position.coords.longitude
	if query?
		params["query"] = query
	get url, params, (result, list) =>
		for route in result
			list.append li "row display route", routeLink(route.shortName, route.id), span "route description ellipsis", route.description

#Loads the route on the map?
loadRoute = window.loadRoute = (routeId) ->
    url = "/route/#{routeId}.json"
    get url, {}, (result, list) =>
        for group in result.stopGroups
            # make list items for group names and stop names
            list.append li "row display group", tag "<h4>", "", group.name.name
            for stop in group.stops
                list.append li "row display stop", link "/stop/#{stop.id}", "stop name", stop.name
                stopMarker stop #, null, clickStopMarker(stop)
            # draw the group's polylines
            for line in group.polylines
                polyline
                        strokeColor: '#090',
                        strokeOpacity: 1,
                        strokeWeight: 4,
                        path: google.maps.geometry.encoding.decodePath(line.points)

loadCrimeStatsByFirstAndLast = window.loadCrimeStatsByFirstAndLast = (stops) ->
    console.log "Loading crime..."
    distance = 500
    first_stop = stops[0]
    last_stop  = stops.pop()
    first_url  = "/stats/get-by-distance/#{first_stop.latitude}/#{first_stop.longitude}/#{distance}/crime.json"
    last_url   = "/stats/get-by-distance/#{last_stop.latitude}/#{last_stop.longitude}/#{distance}/crime.json"
    console.log "Found: #{first_stop} and #{last_stop}"
    loadCrimeStats([first_url, last_url])

loadCrimeStats = window.loadCrimeStats = (urls) ->
    for url in urls
        $.get url, {}, (crimes)=>
            clearMarkerGroup crimeMarkers
            for crime in crimes
                latLng = new google.maps.LatLng(crime.latitude, crime.longitude)
                marker = new google.maps.Marker({'position': latLng, 'title': crime.summarized_offense_description})
                crimeMarkers.push(marker)
            markerCluster = new MarkerClusterer(@googleMap, crimeMarkers)

            google.maps.event.addListener markerCluster, 'mouseover', (cluster) ->
                console.log(cluster.getSize(), ' crimes in the area.')
                stats = {}
                for marker in cluster.getMarkers()
                    stats[marker.title] ?= 0
                    stats[marker.title] += 1
                console.log stats



#Loads the actual buses on the route?
loadRouteTrips = window.loadRouteTrips = (routeId) ->
	url = "/route/#{routeId}/trips.json"
	get url, {}, (result, list) =>
		clearMarkerGroup nearbyMarkers
		for trip in result.trips
			status = trip.status
			# put a list item and a marker for every trip
			list.append li "row display trip", "#{status.vehicleId} arriving to #{status.nextStop} in #{Math.round(status.nextStopTimeOffset / 60)}m#{status.nextStopTimeOffset % 60}s"
			markerOptions
				title: status.vehicleId
				position: latlng(status.position.lat, status.position.lon)
				zIndex: 10000
				icon: "<%= asset_path 'icons/buslocation.png' %>"
				group: nearbyMarkers


window.get = (url, params, callback) ->
	list = $("#model-list")
	list.fadeOut()
	# what to do when the request succeeds
	success = (result) =>
		list.text("")
		window.data = result
		# wrap a bunch of jQuery around the callback to hide and show the list
		callback(result, list)
		list.fadeIn()
	# if the get request fails then display an error message
	# TODO: make the error message more useful.
	failure = (event, request, settings, exception) ->
		list.append(journeyDisplayError("API request failed.")).fadeIn()
	$.get(url, params, success).error(failure)

###
# JOURNEY METHODS
###
hereStrings = [" current location", "here", ""]
# whitelist of search terms that return user's current location
window.locationFound = (position) ->
	$("input#currentPosition").val("#{position.coords.latitude},#{position.coords.longitude}")
	alert "geocode success"
window.showJourney = (from, to, userPosition) ->
	# initialize the map using loadJourney and no click functionality
	@dataFunction = -> loadJourney(from, to)
	# initializeMap(dataFunction, nothing)
	initializeMapOptions
			clickHandler: nothing
			geolocate:
				enable: true
				onSuccess: loadJourney(from, to)
				onFail: loadJourney(from, to)

# returns a geolocation callback that takes the user's position
loadJourney = (from, to) -> (position) ->
	$("#page-title").text("Directions")
	#   title = $("#page-header")
	#   title.html("Loading directions from #{from} to #{to}...").fadeIn()
	# @dataFunction = -> loadJourney(from, to)(position) # TODO: set the dataFunction so we can refresh

	if position?
		userPosition = "#{position.coords.latitude},#{position.coords.longitude}"
		# update the query strings if the user asks for current location
		from = userPosition if from.toLowerCase() in hereStrings
		to = userPosition if to.toLowerCase() in hereStrings
	list = $("#model-list")
	list.css opacity: '1.0'
	list.fadeOut -> list.html("<li id=\"loading_spinner\"></li>").fadeIn()
	loadingSpinner()
	getJourney(from, to)

# call the options.json API to calculate the possible routes
window.getJourney = (from, to) ->
	get "/options.json", {
	from: if typeof(from) == "object" then from = from.toString() else from
	to: if typeof(to) == "object" then to = to.toString() else to }, processJourneyResult

processJourneyResult = (result, list) =>
    $("#page-title").text("Directions")
    title = $("#page-header")
    #returns three things: from, to, and trips
    from = result["from"]
    to = result["to"]
    # build title from the first two items
    #  title.fadeOut 'medium', ->
    #    title.html("<em>From:</em> ").append(from.name).append("<br>")
    #    title.append("<em>To:</em> ").append(to.name).fadeIn()
    $("#fromAddress").val(from.name)
    $("#toAddress").val(to.name)
    # create markers for origin and destination, clear previous markers if they exist
    @fromMarker.setMap null if @fromMarker?
    @fromMarker = markerOptions
            title: from.name
            position: latlng(from.latitude, from.longitude)
            icon: "http://thydzik.com/thydzikGoogleMap/markerlink.php?text=A&color=FC6355"
            draggable: true
    # allow user to drag endpoints to recalculate journey
    @toMarker.setMap null if @toMarker?
    @toMarker = markerOptions
            title: to.name
            position: latlng(to.latitude, to.longitude)
            icon: "http://thydzik.com/thydzikGoogleMap/markerlink.php?text=B&color=FC6355"
            draggable: true
    # add event listeners for dragging start and end markers
    google.maps.event.addListener fromMarker, 'dragend', (mouse) ->
        getJourney(mouse.latLng, toMarker.position)
    google.maps.event.addListener toMarker, 'dragend', (mouse) ->
        getJourney(fromMarker.position, mouse.latLng)
    # construct a function to refresh the journeys (mostly to update times)
    @dataFunction = -> getJourney(fromMarker.position, toMarker.position)
    bounds = new google.maps.LatLngBounds(fromMarker.position, fromMarker.position).extend(toMarker.position)
    @googleMap.fitBounds bounds
    # iterate through trips, adding journey row for each one
    if result["trips"].length == 0
        list.append journeyDisplayError "No connecting buses found."
        # TODO: Replace with an API call.



        get "/deals/"+"Seattle"+".json", {}, (data) ->

            deals = []
            #deals = ({ name:  listing["name"], phone: listing["phone"],type: 'taxi'} for listing in data)
            deals = ({  name:  listing["name"], phone: '(206) 622-6500' ,type: 'taxi'} for listing in data)
            
            #deals = [
                #{name:'Yellow Taxi', phone: '(206) 622-6500', type: 'taxi'},
                #{name: 'Orange Cab', phone: '(206) 522-8800', type: 'taxi'}
            #]

            for deal in deals
                list.append journeyDisplayDeal(deal).fadeIn()
    else
        for trip in result["trips"]
            list.append journeyDisplay(trip).fadeIn()

    # place the crime data around the from and to markers
    loadCrimeStatsByFirstAndLast [from, to]
window.loadJourney = loadJourney

# calls the dataFunction if it is set
window.refreshData = () ->
	@dataFunction() if @dataFunction?

# THIS IS THE BIG ONE #
#######################
# Creates the Google Map object and some helper variables
# dataFunction() : calls dataFunction() to load some initial screen data
# clickHandler(latlng) : attaches clickhandler to the map's 'click' event
# doGeolocate:bool : indicates whether geolocation should be performed after the map is set up
#######################
initializeMap = (dataFunction, clickHandler, doGeolocate = true) ->
	initializeMapOptions
			clickHandler: clickHandler
			dataFunction: dataFunction
			geolocate:
				enable: doGeolocate
				onSuccess: yesLocation
				onFail: null
window.initializeMap = initializeMap
# but really, it takes an options hash that lets you set all sorts of things!
# { zoom:, mapType:, defaultPosition:, clickHandler:, dataFunction:, geolocate: { enable:, onSuccess:, onFail: } }
initializeMapOptions = (options) ->
	defaultPosition = defaultValue(options.defaultPosition, latlng(47.652709, -122.32149))
	mapOptions =
		zoom: defaultValue(options.zoom, 13)
		center: defaultPosition
		mapTypeId: defaultValue(options.mapType, google.maps.MapTypeId.ROADMAP)
		disableDefaultUI: true
		zoomControl: true
		zoomControlOptions:
			position: google.maps.ControlPosition.RIGHT_BOTTOM

	@googleMap = new google.maps.Map(document.getElementById("map_canvas"), mapOptions)
	# a marker showing where the user last clicked (generally the query point)
	#@clickMarker = markerOptions({title: "Seattle", position: defaultPosition})
	# register click handler, wrapping it in a function to extract the latLng object
	if options.clickHandler?
		google.maps.event.addListener(@googleMap, 'click', (event) -> options.clickHandler event.latLng)
	# final stuff: perform geolocation, load initial data
	geolocate(options.geolocate.onSuccess, options.geolocate.onFail) if options.geolocate.enable
	@dataFunction = options.dataFunction
	refreshData()
	@googleMap
# return the map object
window.initializeMapOptions = initializeMapOptions

window.setLayout = (type, option) ->
	$("#model-list").removeClass("two-up").removeClass("three-up")
	switch type
		when 'grid'
			$("#model-list li span.description").fadeOut ->
				$("#model-list").addClass("#{option}-up")
		when 'list'
			$("#model-list li span.description").fadeIn()
