String.prototype.endsWith = (suffix) ->
  this.indexOf(suffix, this.length - suffix.length) != -1

window.defaultValue = (value, defaultValue) ->
  if value? then value else defaultValue

# HTML GENERATORS (jQuery wrappers)
window.tag = (tagname, classes, body...) ->
  html = $(tagname).addClass(classes)
  html.append text for text in body
  html
window.div = (classes, body...) ->
  tag "<div>", classes, body...
window.span = (classes, body...) ->
  tag "<span>", classes, body...
window.li = (classes, body...) ->
  tag "<li>", classes, body...
window.link = (href, classes, body...) ->
  tag("<a>", classes, body...).attr("href", href)

window.colorizeTime = (time) ->
  if time < 0 then "gone"
  else if time < 6 then "now"
  else if time < 16 then "soon"
  else if time < 36 then "soonish"
  else "later"

window.colorizeStatus = (status) ->
  if status.indexOf("early") > -1 then "early"
  else if status.indexOf("late") > -1 then "late"
  else ""

# abbreviates a string if it is above a certain length, optionally applying classes to the returned span
abbrevs = 0 # counter for abbreviation ID
window.abbreviate = (text, length, classes) ->
  return unless text? # gracefully handle null case
  if text.length > length
    # put the truncated text in a span with a tooltip containing the full text
    span("has-tip bottom #{classes}", "#{text[0..length]}...").attr("title", text).attr("id", "abbrev#{abbrevs++}")
  else span classes, text

# returns a distance string using miles if > 1000ft, otherwise in feet.
window.milesOrFeet = (distance) ->
  if distance < 0.19 then "#{(distance * 5280).toFixed(0)}ft" else "#{distance.toFixed(2)}mi"

# creates a stop display list item
window.stopDisplay = (stop) ->
  display = li "row display journey", link("/stop/#{stop.id}", "journey description", abbreviate(stop.name, 30)), span("journey time", milesOrFeet(stop.distance))

# creates an arrival display list item
window.arrivalDisplay = (arrival) ->
  journeyDisplayOptions
      route: routeLink(arrival.routeShortName, arrival.routeId)
      description: [
        tag("<small>", "headsign border round", arrival.tripHeadsign)
        "<br/>"
        abbreviate(arrival.description, 30)
      ]
      time: [
        div("row small", arrival.arrival)
        div("row #{colorizeTime(arrival.wait_minutes)}", arrival.wait_time)
        div("row small #{colorizeStatus(arrival.status)}", arrival.status)
      ]

# makes a button link for a route. automatically adds EXPRESS as needed.
window.routeLink = (routeName, routeId) ->
  if routeName.endsWith("E")
    routeName = routeName.substr(0, routeName.length - 1)
    rte = link "/route/#{routeId}", "route button radius whichbus-green express", div("", routeName, "<br/>", tag "<small>", "", "EXPRESS")
  else
    rte = link "/route/#{routeId}", "route button radius whichbus-green", routeName
  if routeName.length >= 3  # express is removed above so we're looking at unqualified name
    rte.addClass("small")
  rte

# displays an entire journey. creates markers and polyline for the stops and returns journey display HTML
window.journeyDisplay = (journey) ->
  from = journey["from"]
  to = journey["to"]
  timing = journey["when"]
  # markers for from and to stops and a polyline connecting them
  @from_stop = markerOptions
      title: from.name
      position: latlng(from.lat, from.lon)
      icon: "<%= asset_path 'busstop.png' %>"
  to_stop = markerOptions
      title: to.name
      position: latlng(to.lat, to.lon)
      icon: "<%= asset_path 'busstop.png' %>"
  polylineOptions
    path: [from_stop.position, to_stop.position]
    strokeColor: "#7e8073"
    strokeOpacity: 0.5
  # build the journey display itself. lots of messy HTML generation
  journeyDisplayOptions
      route: routeLink(timing.routeShortName, timing.routeId)
      description: link ["stop/#{from.id}", "", abbreviate(from.name, 100, "from")
        #tag("<small>", "", " (#{milesOrFeet(from.distance)})"), "<br/>"
        "<br/>", tag("<small>", "headsign border round", timing.tripHeadsign), "<br/>"
        abbreviate(to.name, 100, "to")]...
        # tag("<small>", "", " (#{milesOrFeet(to.distance)})")]...
      time: [
        div("row small", timing.arrival)
        div("row #{colorizeTime(timing.wait_minutes)}", timing.wait_time)
        div("row small #{colorizeStatus(timing.status)}", timing.status)
      ]

# constructs a journey list item with an error message
window.journeyDisplayError = (message) ->
  journeyDisplayOptions
      route: link("#", "route button radius red", ":(")
      description: [
        tag("<small>", "headsign border round", "BAD NEWS ALL UP IN HERE")
        "<br/>#{message} Sorry, friend."
      ]
      time: ""

# constructs a journey list item. options: {route, description, time}
window.journeyDisplayOptions = (options) ->
  route = span "journey route", options.route...
  description = span "journey description", options.description...
  time = span "journey time", options.time...
  li "", div "row journey", route, description, time

window.alertBox = (type, message) ->
  $("#map_canvas").append div("alert-box #{type}", message, close = link("", "close", "&times;"))
  close.click (event) ->
    event.preventDefault()
    $(this).closest(".alert-box").fadeOut (event) ->
      $(this).remove()
